})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
uc_admit
UC_admit
UC_admit %>%
pivot_wider(names_from= "campus",
values_from = "FilteredCountFR" )
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" )
UC_admit
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" )
UC_admit
UC_admit
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" )
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" ) %>%
pivot_wider(names_from = "Category",
values_from = "c(Davis, Berkeley, Irvine, Los_Angeles, Merced, Riverside, San_Diego, Santa_Barbara, Santa_Cruz)"
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" ) %>%
pivot_wider(names_from = "Category",
values_from = c("Davis", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz")
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" ) %>%
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" ) %>%
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" )
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_enroll"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c( "Campus"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Admit"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_enroll"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c( "Davis", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("y", "Select Y Variable", choices = c("Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Admit"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UCseparated<-
UC_admit %>%
pivot_wider(names_from= "Campus",
values_from = "FilteredCountFR" )
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_enroll"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c( "Davis", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("y", "Select Y Variable", choices = c("Perc FR")),
selectInput("fill", "Select fill Variable", choices = c("Category","Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UCseparated, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Distributions UC Davis"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select Statistic", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
plotOutput("plot", width = "1000px", height = "800px")
))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Campus == "Davis", Ethnicity != "All") %>%
summarise(Amount = sum(FilteredCountFR)) %>%
ggplot(aes_string(x="Academic_Yr",y="Amount",fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Distributions UC Davis"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select Statistic", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
plotOutput("plot", width = "1000px", height = "800px")
))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Campus == "Davis", Ethnicity != "All") %>%
summarise(Amount = sum(FilteredCountFR)) %>%
ggplot(aes_string(x="Academic_Yr",y="Amount",fill = input$x)) +
geom_bar(stat = "identity", position = "dodge") +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Distributions UC Davis"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select Statistic", choices = c("Campus", "Ethnicity", "Category"),
selected = "Campus"),
plotOutput("plot", width = "1000px", height = "800px")
))
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
group_by(Ethnicity, Academic_Yr, Campus, Category) %>%
filter(Campus == "Davis", Ethnicity != "All") %>%
summarise(Amount = sum(FilteredCountFR)) %>%
ggplot(aes_string(x="Academic_Yr",y="Amount",fill = input$x)) +
geom_bar(stat = "identity") +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Campus", "Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Campus", "Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Campus", "Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= "Ethnicity")) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Campus", "Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
uc_admit<-
UC_admit %>%
pivot_wider(names_from = "Category",
values_from = "FilteredCountFR")
uc_admit %>%
select(Academic_Yr, Ethnicity, Admits, Campus) %>%
ggplot(aes(x=Campus, y= Admits, fill= Ethnicity))+
geom_bar(stat = "identity")
UC_admit %>%
summarise(na = sum(is.na(UC_admit)))
library("shinydashboard")
ui <- dashboardPage(
dashboardHeader(title = "uc_app"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr"),
selected = "Academic_Yr"),
selectInput("y", "Select Y Variable", choices = c("Admits", "Applicants", "Enrollees")),
selectInput("fill", "Select fill Variable", choices = c("Campus", "Ethnicity"))
), # close the first box
box(title = "Plot of UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(uc_admit, aes_string(x = input$x, y =  input$y, fill= input$fill)) + geom_bar(stat= "Identity") + theme_light(base_size = 18)+theme(axis.text.x = element_text(angle = 60, hjust = 1))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
install.packages(ape)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(echo = TRUE)
install.packages(ape)
install.packages(seqinr)
install.packages(rentrez)
install.packages("ape")
install.packages("seqinr")
install.packages("rentrez")
library(ape)
library(seqinr)
library(rentrez)
library(ape)
library(seqinr)
library(rentrez)
library(ape)
library(seqinr)
library(rentrez)
